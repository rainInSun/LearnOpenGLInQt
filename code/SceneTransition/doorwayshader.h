/*
author: gre
License: MIT
*/

static const char *doorwayVertexSource = "#version 330 core\n"
	"layout (location = 0) in vec3 aPos;\n"
	"layout(location = 1) in vec2 aTexCoord;\n"
	"out vec2 texCoord;\n"
	"void main()\n"
	"{\n"
	"	texCoord = aTexCoord;\n"
	"	gl_Position = vec4(aPos, 1.0);\n"
	"}\0";

static const char *doorwayFragmentSource = "#version 330 core\n"
	"const float reflection = 0.4;\n"
	"const float perspective = 0.4;\n"
	"const float depth = 3;\n"
	"\n"
	"const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n"
	"const vec2 boundMin = vec2(0.0, 0.0);\n"
	"const vec2 boundMax = vec2(1.0, 1.0);\n"
	"\n"
	"out vec4 fragColor;\n"
	"in vec2 texCoord;\n"
	"uniform float progress;\n"
	"// texture samplers\n"
	"uniform sampler2D texture0;\n"
	"uniform sampler2D texture1;\n"
	"\n"
	"bool inBounds (vec2 p)\n"
	"{\n"
	"	return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n"
	"}\n"
	"\n"
	"vec2 project (vec2 p)\n"
	"{\n"
	"	return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n"
	"}\n"
	"\n"
	"vec4 bgColor (vec2 p, vec2 pto)\n"
	"{\n"
	"	vec4 c = black;\n"
	"	pto = project(pto);\n"
	"	if (inBounds(pto)) {\n"
	"		c += mix(black, texture(texture1, pto), reflection * mix(1.0, 0.0, pto.y));\n"
	"	}\n"
	"	return c;\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec2 p = texCoord.xy;\n"
	"	vec2 pfr = vec2(-1.);\n"
	"	vec2 pto = vec2(-1.);\n"
	"	float middleSlit = 2.0 * abs(p.x-0.5) - progress;\n"
	"	if (middleSlit > 0.0) {\n"
	"		pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);\n"
	"		float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));\n"
	"		pfr.y -= d/2.;\n"
	"		pfr.y *= d;\n"
	"		pfr.y += d/2.;\n"
	"	}\n"
	"	float size = mix(1.0, depth, 1.-progress);\n"
	"	pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\n"
	"	if (inBounds(pfr)) {\n"
	"		fragColor = texture(texture0, pfr);\n"
	"		return;\n"
	"	}\n"
	"	else if (inBounds(pto)) {\n"
	"		fragColor = texture(texture1, pto);\n"
	"		return;\n"
	"	}\n"
	"	else {\n"
	"		fragColor = bgColor(p, pto);\n"
	"	}\n"
	"}\0";