/*
Author: huynx
License: MIT
*/

static const char *bowTieHorizVertexSource = "#version 330 core\n"
	"layout (location = 0) in vec3 aPos;\n"
	"layout(location = 1) in vec2 aTexCoord;\n"
	"out vec2 texCoord;\n"
	"void main()\n"
	"{\n"
	"	texCoord = aTexCoord;\n"
	"	gl_Position = vec4(aPos, 1.0);\n"
	"}\0";

static const char *bowTieHorizFragmentSource = "#version 330 core\n"
	"out vec4 fragColor;\n"
	"in vec2 texCoord;\n"
	"uniform float progress;\n"
	"// texture samplers\n"
	"uniform sampler2D texture0;\n"
	"uniform sampler2D texture1;\n"
	"\n"
	"vec2 bottom_left = vec2(0.0, 1.0);\n"
	"vec2 bottom_right = vec2(1.0, 1.0);\n"
	"vec2 top_left = vec2(0.0, 0.0);\n"
	"vec2 top_right = vec2(1.0, 0.0);\n"
	"vec2 center = vec2(0.5, 0.5);\n"
	"\n"
	"float check(vec2 p1, vec2 p2, vec2 p3)\n"
	"{\n"
	"	return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n"
	"}\n"
	"\n"
	"bool PointInTriangle (vec2 pt, vec2 p1, vec2 p2, vec2 p3)\n"
	"{\n"
	"	bool b1, b2, b3;\n"
	"	b1 = check(pt, p1, p2) < 0.0;\n"
	"	b2 = check(pt, p2, p3) < 0.0;\n"
	"	b3 = check(pt, p3, p1) < 0.0;\n"
	"	return ((b1 == b2) && (b2 == b3));\n"
	"}\n"
	"\n"
	"bool in_left_triangle(vec2 p)\n"
	"{\n"
	"	vec2 vertex1, vertex2, vertex3;\n"
	"	vertex1 = vec2(progress, 0.5);\n"
	"	vertex2 = vec2(0.0, 0.5-progress);\n"
	"	vertex3 = vec2(0.0, 0.5+progress);\n"
	"	if (PointInTriangle(p, vertex1, vertex2, vertex3))\n"
	"	{\n"
	"		return true;\n"
	"	}\n"
	"	return false;\n"
	"}\n"
	"\n"
	"bool in_right_triangle(vec2 p)\n"
	"{\n"
	"	vec2 vertex1, vertex2, vertex3;\n"
	"	vertex1 = vec2(1.0-progress, 0.5);\n"
	"	vertex2 = vec2(1.0, 0.5-progress);\n"
	"	vertex3 = vec2(1.0, 0.5+progress);\n"
	"	if (PointInTriangle(p, vertex1, vertex2, vertex3))\n"
	"	{\n"
	"		return true;\n"
	"	}\n"
	"	return false;\n"
	"}\n"
	"\n"
	"float blur_edge(vec2 bot1, vec2 bot2, vec2 top, vec2 testPt)\n"
	"{\n"
	"	vec2 lineDir = bot1 - top;\n"
	"	vec2 perpDir = vec2(lineDir.y, -lineDir.x);\n"
	"	vec2 dirToPt1 = bot1 - testPt;\n"
	"	float dist1 = abs(dot(normalize(perpDir), dirToPt1));\n"
	"\n"
	"	lineDir = bot2 - top;\n"
	"	perpDir = vec2(lineDir.y, -lineDir.x);\n"
	"	dirToPt1 = bot2 - testPt;\n"
	"	float min_dist = min(abs(dot(normalize(perpDir), dirToPt1)), dist1);\n"
	"\n"
	"	if (min_dist < 0.005) {\n"
	"		return min_dist / 0.005;\n"
	"	}\n"
	"	else {\n"
	"		return 1.0;\n"
	"	};\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec2 uv = texCoord.xy;\n"
	"	if (in_left_triangle(uv))\n"
	"	{\n"
	"		if (progress < 0.1)\n"
	"		{\n"
	"			fragColor = texture(texture0, uv);\n"
	"			return;\n"
	"		}\n"
	"		if (uv.x < 0.5)\n"
	"		{\n"
	"			vec2 vertex1 = vec2(progress, 0.5);\n"
	"			vec2 vertex2 = vec2(0.0, 0.5-progress);\n"
	"			vec2 vertex3 = vec2(0.0, 0.5+progress);\n"
	"			fragColor = mix(\n"
	"				texture(texture0, uv),\n"
	"				texture(texture1, uv),\n"
	"				blur_edge(vertex2, vertex3, vertex1, uv)\n"
	"			);\n"
	"			return;\n"
	"		}\n"
	"		else\n"
	"		{\n"
	"			if (progress > 0.0)\n"
	"			{\n"
	"				fragColor = texture(texture1, uv);\n"
	"				return;\n"
	"			}\n"
	"			else\n"
	"			{\n"
	"				fragColor = texture(texture0, uv);\n"
	"				return;\n"
	"			}\n"
	"		}\n"
	"	}\n"
	"	else if (in_right_triangle(uv))\n"
	"	{\n"
	"		if (uv.x >= 0.5)\n"
	"		{\n"
	"			vec2 vertex1 = vec2(1.0-progress, 0.5);\n"
	"			vec2 vertex2 = vec2(1.0, 0.5-progress);\n"
	"			vec2 vertex3 = vec2(1.0, 0.5+progress);\n"
	"			fragColor = mix(\n"
	"				texture(texture0, uv),\n"
	"				texture(texture1, uv),\n"
	"				blur_edge(vertex2, vertex3, vertex1, uv)\n"
	"			);\n"
	"			return;\n"
	"		}\n"
	"		else\n"
	"		{\n"
	"			fragColor = texture(texture0, uv);\n"
	"			return;\n"
	"		}\n"
	"	}\n"
	"	else\n"
	"	{\n"
	"		fragColor = texture(texture0, uv);\n"
	"		return;\n"
	"	}\n"
	"}\0";