/*
Author: Rich Harris
License: MIT
 */

static const char *perlinVertexSource = "#version 330 core\n"
	"layout (location = 0) in vec3 aPos;\n"
	"layout(location = 1) in vec2 aTexCoord;\n"
	"out vec2 texCoord;\n"
	"void main()\n"
	"{\n"
	"	texCoord = aTexCoord;\n"
	"	gl_Position = vec4(aPos, 1.0);\n"
	"}\0";

static const char *perlinFragmentSource = "#version 330 core\n"
	"#ifdef GL_ES\n"
	"precision mediump float;\n"
	"#endif\n"
	"\n"
	"const float scale = 4.0;\n"
	"const float smoothness = 0.01;\n"
	"const float seed = 12.9898;\n"
	"\n"
	"out vec4 fragColor;\n"
	"in vec2 texCoord;\n"
	"uniform float progress;\n"
	"// texture samplers\n"
	"uniform sampler2D texture0;\n"
	"uniform sampler2D texture1;\n"
	"\n"
	"float random(vec2 co)\n"
	"{\n"
	"	highp float a = seed;\n"
	"	highp float b = 78.233;\n"
	"	highp float c = 43758.5453;\n"
	"	highp float dt= dot(co.xy ,vec2(a,b));\n"
	"	highp float sn= mod(dt,3.14);\n"
	"	return fract(sin(sn) * c);\n"
	"}\n"
	"\n"
	"float noise (vec2 st)\n"
	"{\n"
	"	vec2 i = floor(st);\n"
	"	vec2 f = fract(st);\n"
	"\n"
	"	// Four corners in 2D of a tile\n"
	"	float a = random(i);\n"
	"	float b = random(i + vec2(1.0, 0.0));\n"
	"	float c = random(i + vec2(0.0, 1.0));\n"
	"	float d = random(i + vec2(1.0, 1.0));\n"
	"\n"
	"	// Smooth Interpolation\n"
	"	// Cubic Hermine Curve.  Same as SmoothStep()\n"
	"	vec2 u = f*f*(3.0-2.0*f);\n"
	"	// u = smoothstep(0.,1.,f);\n"
	"\n"
	"	// Mix 4 coorners porcentages\n"
	"	return mix(a, b, u.x) +\n"
	"			(c - a)* u.y * (1.0 - u.x) +\n"
	"			(d - b) * u.x * u.y;\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec2 uv = texCoord.xy;\n"
	"	vec4 from = texture(texture0, uv);\n"
	"	vec4 to = texture(texture1, uv);\n"
	"	float n = noise(uv * scale);\n"
	"\n"
	"	float p = mix(-smoothness, 1.0 + smoothness, progress);\n"
	"	float lower = p - smoothness;\n"
	"	float higher = p + smoothness;\n"
	"\n"
	"	float q = smoothstep(lower, higher, n);\n"
	"\n"
	"	fragColor = mix(\n"
	"		from,\n"
	"		to,\n"
	"		1.0 - q\n"
	"	);\n"
	"}\0";