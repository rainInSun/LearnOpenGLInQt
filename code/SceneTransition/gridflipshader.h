/*
License: MIT
Author: TimDonselaar
*/

static const char *gridFlipVertexSource = "#version 330 core\n"
	"layout (location = 0) in vec3 aPos;\n"
	"layout(location = 1) in vec2 aTexCoord;\n"
	"out vec2 texCoord;\n"
	"void main()\n"
	"{\n"
	"	texCoord = aTexCoord;\n"
	"	gl_Position = vec4(aPos, 1.0);\n"
	"}\0";

static const char *gridFlipFragmentSource = "#version 330 core\n"
	"const ivec2 size = ivec2(4);\n"
	"const float pause = 0.1;\n"
	"const float dividerWidth = 0.05;\n"
	"const vec4 bgcolor = vec4(0.0, 0.0, 0.0, 1.0);\n"
	"const float randomness = 0.1;\n"
	"\n"
	"out vec4 fragColor;\n"
	"in vec2 texCoord;\n"
	"uniform float progress;\n"
	"// texture samplers\n"
	"uniform sampler2D texture0;\n"
	"uniform sampler2D texture1;\n"
	"\n"
	"float rand (vec2 co)\n"
	"{\n"
	"	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n"
	"}\n"
	"\n"
	"float getDelta(vec2 p)\n"
	"{\n"
	"	vec2 rectanglePos = floor(vec2(size) * p);\n"
	"	vec2 rectangleSize = vec2(1.0 / vec2(size).x, 1.0 / vec2(size).y);\n"
	"	float top = rectangleSize.y * (rectanglePos.y + 1.0);\n"
	"	float bottom = rectangleSize.y * rectanglePos.y;\n"
	"	float left = rectangleSize.x * rectanglePos.x;\n"
	"	float right = rectangleSize.x * (rectanglePos.x + 1.0);\n"
	"	float minX = min(abs(p.x - left), abs(p.x - right));\n"
	"	float minY = min(abs(p.y - top), abs(p.y - bottom));\n"
	"	return min(minX, minY);\n"
	"}\n"
	"\n"
	"float getDividerSize()\n"
	"{\n"
	"	vec2 rectangleSize = vec2(1.0 / vec2(size).x, 1.0 / vec2(size).y);\n"
	"	return min(rectangleSize.x, rectangleSize.y) * dividerWidth;\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec2 p = texCoord.xy;\n"
	"	if(progress < pause) {\n"
	"		float currentProg = progress / pause;\n"
	"		float a = 1.0;\n"
	"		if(getDelta(p) < getDividerSize()) {\n"
	"		a = 1.0 - currentProg;\n"
	"		}\n"
	"		fragColor = mix(bgcolor, texture(texture0, p), a);\n"
	"	}\n"
	"	else if(progress < 1.0 - pause){\n"
	"		if(getDelta(p) < getDividerSize()) {\n"
	"			fragColor = bgcolor;\n"
	"		} else {\n"
	"			float currentProg = (progress - pause) / (1.0 - pause * 2.0);\n"
	"			vec2 q = p;\n"
	"			vec2 rectanglePos = floor(vec2(size) * q);\n"
	"\n"
	"			float r = rand(rectanglePos) - randomness;\n"
	"			float cp = smoothstep(0.0, 1.0 - r, currentProg);\n"
	"\n"
	"			float rectangleSize = 1.0 / vec2(size).x;\n"
	"			float delta = rectanglePos.x * rectangleSize;\n"
	"			float offset = rectangleSize / 2.0 + delta;\n"
	"\n"
	"			p.x = (p.x - offset)/abs(cp - 0.5)*0.5 + offset;\n"
	"			vec4 a = texture(texture0, p);\n"
	"			vec4 b = texture(texture1, p);\n"
	"\n"
	"			float s = step(abs(vec2(size).x * (q.x - delta) - 0.5), abs(cp - 0.5));\n"
	"			fragColor = mix(bgcolor, mix(b, a, step(cp, 0.5)), s);\n"
	"		}\n"
	"	}\n"
	"	else {\n"
	"		float currentProg = (progress - 1.0 + pause) / pause;\n"
	"		float a = 1.0;\n"
	"		if(getDelta(p) < getDividerSize()) {\n"
	"			a = currentProg;\n"
	"		}\n"
	"		fragColor = mix(bgcolor, texture(texture1, p), a);\n"
	"	}\n"
	"}\0";